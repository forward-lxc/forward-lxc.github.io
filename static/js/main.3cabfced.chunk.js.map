{"version":3,"sources":["page/lodingPage/lodingPage.js","App.js","serviceWorker.js","index.js"],"names":["LodingPageComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","documentWidth","document","documentElement","clientWidth","body","documentHeight","clientHeight","lodingpageWarpWidth","arrData","window","addEventListener","handleResize","bind","console","log","removeEventListener","e","setState","target","innerWidth","spanWidth","react_default","a","createElement","className","style","height","width","length","map","item","index","key","left","animationDelay","onClick","btn_clickfunction","Component","App","lodingPage_lodingPage","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAiEeA,qBA1Db,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAM,CACVC,cAAeC,SAASC,gBAAgBC,aAAeF,SAASG,KAAKD,YACrEE,eAAgBJ,SAASC,gBAAgBI,cAAgBL,SAASG,KAAKE,aACvEC,oBAAoB,OACpBC,QAAQ,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,MANjBhB,oFAUjBiB,OAAOC,iBAAiB,SAAUf,KAAKgB,aAAaC,KAAKjB,OACzDkB,QAAQC,IAAInB,KAAKI,sDAGhBU,OAAOM,oBAAoB,SAAUpB,KAAKgB,aAAaC,KAAKjB,4CAEjDqB,GAEXrB,KAAKsB,SAAS,CACbjB,cAAgBgB,EAAEE,OAAOC,WACzBd,eAAgBJ,SAASC,gBAAgBI,cAAgBL,SAASG,KAAKE,2DAIzEX,KAAKsB,SAAS,CACbV,oBAAoB,qCAMvB,IAAIP,EAAcL,KAAKI,MAAMC,cACzBoB,EAAUpB,GAAe,IAAI,GAAKA,GAAe,IAAI,GAAK,GAE9D,OACKqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,MAAO,CAACC,OAAO/B,KAAKI,MAAMM,eAAesB,MAAMhC,KAAKI,MAAMQ,sBAC1Fc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,MAAO,CAACE,MAAMhC,KAAKI,MAAMS,QAAQoB,OAAOR,EAAU,OAE1EzB,KAAKI,MAAMS,QAAQqB,IAAI,SAACC,EAAKC,GAC5B,OACCV,EAAAC,EAAAC,cAAA,QAAMS,IAAKD,EAAON,MAAO,CAACQ,KAAKb,EAAUW,EAAM,KAAKG,eAAe,GAAIH,EAAM,MAAOD,MAKxFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWW,QAASxC,KAAKyC,kBAAkBxB,KAAKjB,OAC9D0B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,OACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCArDUa,cCkBnBC,MAXf,WACE,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdH,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,iECLSiB,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAAS7C,SAAS8C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3cabfced.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./lodingPage.scss\";\n// import LandPageComponent from \"./components/landPage.js\";\n\n\nclass LodingPageComponent extends Component {\n\n  constructor(props){\n  \tsuper(props);\n  \tthis.state={\n  \t\tdocumentWidth: document.documentElement.clientWidth || document.body.clientWidth,\n  \t\tdocumentHeight: document.documentElement.clientHeight || document.body.clientHeight ,\n  \t\tlodingpageWarpWidth:'100%',\n  \t\tarrData:['W','E','L','C','O','M','E']\n  \t}\n  }\n  componentWillMount(){\n  \twindow.addEventListener('resize', this.handleResize.bind(this)) //监听窗口大小改变\n  \tconsole.log(this.state)\n  }\n  componentWillUnmount() {       \n    window.removeEventListener('resize', this.handleResize.bind(this))//组件挂掉之后接触事件绑定\n  }\n  handleResize(e){\n    // console.log('浏览器窗口大小改变事件', e.target.innerWidth)\n    this.setState({ \n    \tdocumentWidth : e.target.innerWidth ,\n    \tdocumentHeight: document.documentElement.clientHeight || document.body.clientHeight ,\n    })\n  }\n  btn_clickfunction(){\n  \tthis.setState({\n  \t\tlodingpageWarpWidth:0\n  \t})\n  }\n\n  render() {\n  \t//根据不同屏幕进行文字 || 宽度 进行适配\n\tlet documentWidth=this.state.documentWidth;\n\tlet spanWidth=documentWidth<=375?24 : documentWidth<=768?40 : 80 ;\n\n\treturn (\n      <div className=\"lodingpage_warp\" style={{height:this.state.documentHeight,width:this.state.lodingpageWarpWidth}} >\n      \t<div className=\"text_warp\" style={{width:this.state.arrData.length*spanWidth+'px'}}>\n\t       \t{\n\t       \t\tthis.state.arrData.map((item,index)=>{\n\t       \t\t\treturn(\n\t       \t\t\t\t<span key={index} style={{left:spanWidth*index+'px',animationDelay:0.2*index+'s'}}>{item}</span>\n\t       \t\t\t)\n\t       \t\t})\n\t       \t}\n       \t</div>\n       \t<div className=\"btn_warp\" onClick={this.btn_clickfunction.bind(this)}>\n       \t\t<div className=\"btn_right_border\"></div>\n       \t\t<div className=\"btn_top_border\"></div>\n       \t\t<div className=\"btn_bottom_border\"></div>\n       \t\t<div className=\"btn_left_border\"></div>\n       \t\t<div className=\"btn_jianTou\"> > </div>\n       \t\t<div className=\"btn_jianTou_border\"></div>\n       \t</div>\t\n      </div>\n    )\n  }\n}\n\nexport default LodingPageComponent;","import React from 'react';\nimport './App.css';\nimport LodingPageComponent from './page/lodingPage/lodingPage';\n// import LeftMenuComponent from './component/common/leftMenu/leftMenu';\n// import ContentComponent from './component/common/content/content';\n\n\n/*<div className=\"conainer_left\"><LeftMenuComponent/></div>\n        <div className=\"conainer_right\"><ContentComponent/></div>\n        */\n\n\nfunction App() {\n  return (\n    <div className=\"App\"> \n      <div className=\"conainer\">\n      \t<LodingPageComponent/>\n      \t<h3><center>先这样 有空再写</center></h3>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}